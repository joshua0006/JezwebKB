rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read all articles
    match /articles/{articleId} {
      allow read: if true;
      
      // Allow creation of articles by authenticated users with admin role
      // This relies on a separate collection 'users' with role field
      allow create: if request.auth != null && 
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow updates by authenticated admin users
      allow update: if request.auth != null &&
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow deletion by authenticated admin users
      allow delete: if request.auth != null &&
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Allow users to read their own profiles
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Admin users can read any user profile
      allow read: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Users can update their own profiles (but not change role)
      allow update: if request.auth != null && 
                    request.auth.uid == userId &&
                    !('role' in request.resource.data) || 
                    request.resource.data.role == resource.data.role;
      
      // New users can be created (handled by Firebase Auth triggers)
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Comments can be created by any authenticated user
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }
  }
}